Backpropagation

Backpropagation
    backpropagationは、チェーンルールの再帰的適用によって表現の勾配を計算する方法。

    プロセスとその曖昧さを理解することは、ニューラルネットワークを理解し、
    効果的に開発、設計、デバッグする上で重要。


関心: xが入力のベクトルである関数f(x)が与えられたときの、xのfの勾配。
    
    ニューラルネットワークの特定のケースでは、fは損失関数（L）に対応し、
    入力xはトレーニングデータとニューラルネットワークの重みで構成される。
    →要するに損失関数Lの重みに関する勾配を求める。

バックプロパゲーションを使用して入力例xiの勾配を計算することができるが、
実際にはパラメータの勾配（たとえばW、b）のみを計算してパラメータの更新を実行する。

xiの勾配は、視覚化やニューラルネットワークが何をしているのかを解釈する時には役に立つ。


Simple expressions and interpretation of the gradient
グラデーションの簡単な表現と解釈

より複雑な表現の表記法や表記法を開発できるように、簡単なことから始める。
2つの数 f（x、y）= xy の単純な乗算関数を考える。
    f(x,y) = xy    →   ∂f/∂x=y   ∂f/∂y=x

特定のポイントにおける傾き:
    df(x)/dx = lim h →0 (f(x+h)−f(x))/h
hが非常に小さいとき、関数は直線でよく近似され、微分はその傾きである。
各変数の導関数は、その値に対する式全体の感度を示す。


Compound expressions with chain rule
チェーンルールを持つ複合式

チェーンルール
    勾配式を一緒に「連鎖する」正しい方法は乗算によるものであることを示している。
    式を部分ごとに分け、それぞれの変数に関する勾配を順番に求めていく感じ？。

フォワードパスでは、単純に計算を行う。
バックプロパゲーションでは、勾配は、回路を逆向きに流れるように考え、
ノードが掛け算の場合偏微分を行い、足し算の場合には、そのまま値を通過させる。


Intuitive understanding of backpropagation
バックプロパゲーションの直感的な理解

バックプロパゲーションは、最終出力値をより高くするために、
出力が増減するかどうかにかかわらず、
（勾配信号を介して）互いに通信するゲートと考えることができる。


Modularity: Sigmoid example
モジュール性：シグモイドの例
f(w,x) = 1 / 1+e^−(w0x0+w1x1+w2)

機能は複数のゲートで構成される。
f(x)=1x → dfdx=−1/x2
fc(x)=c+x → dfdx=1
f(x)=ex → dfdx=ex
fa(x)=ax → dfdx=a


上記の例では、
w、xの間の内積の結果に作用する関数アプリケーションの長い連鎖を参照している。
これらの演算が実装する関数はシグモイド関数σ（x）と呼ばれる。

導関数を入力すると、シグモイド関数の導関数は簡約化される。
σ(x) = 1/ 1+e−x
→   dσ(x)/ dx = e^−x/ (1+e^−x)^2 = (1+e^−x −1/ 1+e^−x) (1/ 1+e^−x) = (1−σ(x))σ(x)
⇛   dσ(x)/ dx = (1−σ(x))σ(x)


Backprop in practice: Staged computation
実際のバックドロップ：段階的計算

f(x,y) = x+σ(y)/ σ(x)+(x+y)^2

同じ変数が複数含まれる式で逆伝播を行うときには、
逆伝播してきた勾配を、それぞれの変数に関して累積する必要がある。

変数が回路の異なる部分に分岐すると、それに戻る勾配が追加されるという、
Calculusの多変数チェーンルールに従う。


最大ゲート
    最大ゲートの局所勾配が最大値で1.0であり、他のすべての値で0.0


乗算ゲート
    連鎖規則中の出力の勾配によって乗算される。

乗算ゲートへの入力の1つが非常に小さく、もう1つが非常に大きい場合、
小さな入力には比較的大きな勾配を割り当て、大きな入力には小さな勾配を割り当てる。

勾配がどのように流れるかを直感的に理解することで、
これらのケースの一部をデバッグするのに役立つ。



Gradients for vectorized operations
ベクトル化演算の勾配

Matrix-Matrix multiply gradient
行列 - 行列乗算勾配

Work with small, explicit examples
